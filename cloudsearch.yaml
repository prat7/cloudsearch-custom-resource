AWSTemplateFormatVersion: '2010-09-09'
Description: CloudSearch Custom Resource

Parameters:
  DomainName:
    Description: Domain name for the CloudSearch Domain
    Type: String

Resources:
  CloudSearchCustomResource:
    Type: Custom::CloudSearchCustomResource
    Properties:
      ServiceToken: !GetAtt CloudSearchFunction.Arn
      Region: !Ref "AWS::Region"

  CloudSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: 
            |-
            var aws = require("aws-sdk");
             
            exports.handler = function(event, context) {
                var cloudsearch = new aws.CloudSearch({region: event.ResourceProperties.Region});
                console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
                
                // For Delete requests, immediately send a SUCCESS response.
                if (event.RequestType == "Delete") {
                    var params = {
                      DomainName: process.env.DomainName /* required */
                    };
                    cloudsearch.deleteDomain(params, function(err, data) {
                      if (err) console.log(err, err.stack); // an error occurred
                      else     console.log(data);           // successful response
                    });
                    sendResponse(event, context, "SUCCESS");
                    return;
                }
             
                var responseStatus = "FAILED";
                var responseData = {};
             
             
                // Create CloudSearch Domain
                var params = {
                  DomainName: process.env.DomainName /* required */
                };
                cloudsearch.createDomain(params, function(err, response) {
                  if (err) {
                    console.log(err, err.stack); // an error occurred
                  }
                  else {
                    console.log(response);      
                    responseData.Id = response.DomainStatus.DomainId;
                    responseStatus = "SUCCESS";
                  }
                sendResponse(event, context, responseStatus, responseData);
                });
                
            };

            // Send response to the pre-signed S3 URL 
            function sendResponse(event, context, responseStatus, responseData) {
             
                var responseBody = JSON.stringify({
                    Status: responseStatus,
                    Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                    PhysicalResourceId: context.logStreamName,
                    StackId: event.StackId,
                    RequestId: event.RequestId,
                    LogicalResourceId: event.LogicalResourceId,
                    Data: responseData
                });
             
                console.log("RESPONSE BODY:\n", responseBody);
             
                var https = require("https");
                var url = require("url");
             
                var parsedUrl = url.parse(event.ResponseURL);
                var options = {
                    hostname: parsedUrl.hostname,
                    port: 443,
                    path: parsedUrl.path,
                    method: "PUT",
                    headers: {
                        "content-type": "",
                        "content-length": responseBody.length
                    }
                };
             
                console.log("SENDING RESPONSE...\n");
             
                var request = https.request(options, function(response) {
                    console.log("STATUS: " + response.statusCode);
                    console.log("HEADERS: " + JSON.stringify(response.headers));
                    // Tell AWS Lambda that the function execution is done  
                    context.done();
                });
             
                request.on("error", function(error) {
                    console.log("sendResponse Error:" + error);
                    // Tell AWS Lambda that the function execution is done  
                    context.done();
                });
              
                // write data to request body
                request.write(responseBody);
                request.end();
            }
      Handler: "index.handler"
      Environment:
        Variables:
          DomainName: !Ref DomainName 
      Runtime: nodejs14.x
      Timeout: 300
      Role: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/dev-dnc-lambda-apigw-write"
Outputs:
  DomainId:
    Value: !GetAtt CloudSearchCustomResource.Id